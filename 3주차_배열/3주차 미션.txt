< 미션 1 >
#include <stdio.h>
#include <cs50.h>
#include <string.h>
#include <stdlib.h>

//score = 성적, grade = 학점
const int NUMBER_OF_GRADES = 9;
const int SCORES[NUMBER_OF_GRADES] = {95, 90, 85, 80, 75, 70, 65, 60, 0};
const char GRADES[NUMBER_OF_GRADES] = {'A', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'F'};

int main(void){

    printf("학점 프로그램\n");
    printf("종료를 원하면 \"999\" 를 입력\n");
    printf("[학점 테이블]\n");
    printf("점 수 : 95  90  85  80  75  70  65  60  0\n");
    printf("점 수 : A+  A   B+  B   C+  C   D+  D   F\n");

    int myScore = 0;
    do{
        myScore = get_int("성적을 입력하세요 (0 ~ 100) : ");

        if(0 <= myScore && myScore <= 100)
        {
            if(myScore >= SCORES[0])
                printf("학점은 %c+ 입니다.\n", GRADES[0]);
            else if(myScore >= SCORES[1])
                printf("학점은 %c 입니다.\n", GRADES[1]);
            else if(myScore >= SCORES[2])
                printf("학점은 %c+ 입니다.\n", GRADES[2]);
            else if(myScore >= SCORES[3])
                printf("학점은 %c 입니다.\n", GRADES[3]);
            else if(myScore >= SCORES[4])
                printf("학점은 %c+ 입니다.\n", GRADES[4]);
            else if(myScore >= SCORES[5])
                printf("학점은 %c 입니다.\n", GRADES[5]);
            else if(myScore >= SCORES[6])
                printf("학점은 %c+ 입니다.\n", GRADES[6]);
            else if(myScore >= SCORES[7])
                printf("학점은 %c 입니다.\n", GRADES[7]);
            else if(myScore >= SCORES[8])
                printf("학점은 %c 입니다.\n", GRADES[8]);
        }
        else
        {
            printf("성적을 올바르게 입력하세요! (0~100), 프로그램을 종료하려면 (-1)\n");
            continue;
        }

    }while(myScore != -1);
    printf("학점 프로그램을 종료합니다.\n");

}

//질문사항
1. 문자열을 배열에 어떻게 넣는지
2. 포인터 * 어떻게 사용 했는지 이 문제에서
3. malloc 있는 부분 설명


<문제 3 >

//3주차 문제 3. Queue를 만들어보자!

#include <stdio.h>
#include <cs50.h>
#define MAX 10

int queue[MAX];
int front, rear;

void init_queue(void);
void clear_queue();
int add(int item);
int pop();
void display();

int main(void)
{

    init_queue();

    int func = get_int("add (1), pop (2), display (3), quit (4) 기능 구현 번호 입력: \n");

    switch(func)
    {
        case 1:
            add(1);
            break;
        case 2:
            pop();
            break;
        case 3:
            display();
            break;
        case 4:
            printf("종료되었습니다.");
            break;
        default:
            printf("default");
    }

}

void init_queue()
{
    front = rear = 0;
}
void clear_queue()
{
    front = rear;
}
int add(int item)
{
    if((rear + 1) % MAX == front)
    {
        printf("Queue가 꽉 찼습니다.\n");
        return -1;
    }
    else
    {
        queue[rear] = item;
        rear = ++rear % MAX;
        return 1;
    }


}
int pop()
{
    if(front == rear)
    {
        printf("Queue가 비었습니다.\n");
        return -1;
    }
    item = queue[front];
    front = ++front % MAX;
    return item;
}
void display()
{
    for(int i = front; i != rear; ++i % MAX)
    {
        printf("queue[%d] = %d\n", i, queue[i]);
    }
    if(front == rear)
    {
        printf("Queue가 비었습니다.\n");
        return -1;
    }
    printf("\n");

}





/*1. 구조체
 ㄱ. 큐 배열을 만들고
 ㄴ. front, rear 변수를 만듬

2. add() 함수
 ㄱ. (만약 큐 배열이 꽉 찼다면)큐 배열의 길이? == 10(max) 라면, => Queue가 꽉 찬거 출력
 ㄴ. (비었다면) 큐 배열에 삽입이 가능한지 확인은, 값을 입력하고,*/




< Mary님 의 미션 1 >
#include <cs50.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
​
​
const int NUMBER_OF_GRADES = 9;
const int SCORES[NUMBER_OF_GRADES] = {95, 90, 85, 80, 75, 70, 65, 60, 0};
const char * GRADES[NUMBER_OF_GRADES] = { "A+", "A", "B+", "B", "C+", "C", "D+", "D", "F"};
//학점테이블을 만들기 위한 코드
​
​
int main(void)
{
    printf("학점 프로그램\n");
    printf("종료를 원하면 \"-1\" 를 입력\n");
    //실행시 상단 설명내용
​
​
    printf("[학점 테이블]\n");
​
    printf("점수 :");
    for(int i = 0; i < 9; i++){
    printf("%4i", SCORES[i]);
    }
    printf("\n");
    //학점 테이블 내 점수란에 적용될 구조
​
​
    printf("학점 :");
    for(int i = 0; i < 9; i++){
    printf("%4s", GRADES[i]);
    }
    printf("\n");
    //학점 테이블 내 학점란에 적용될 구조
​
    
        while(true){
            int n = get_int("성적을 입력하세요. ( 0 ~ 100) :");
​
            if(n<=100 && n >= 95){
                printf("학점은 %s입니다!\n",GRADES[0]);
            }
​
            else if(n<=94 && n >= 90){
                printf("학점은 %s입니다!\n",GRADES[1]);
            }
​
            else if(n<=89 && n >= 85){
                printf("학점은 %s입니다!\n",GRADES[2]);
            }
​
            else if(n<=84 && n >= 80){
                printf("학점은 %s입니다!\n",GRADES[3]);
            }
​
            else if(n<=79 && n >= 75){
                printf("학점은 %s입니다!\n",GRADES[4]);
            }
​
             else if(n<=74 && n >= 70){
                printf("학점은 %s입니다!\n",GRADES[5]);
            }
​
            else if(n<=69 && n >= 65){
                printf("학점은 %s입니다!\n",GRADES[6]);
            }
​
            else if(n<=64 && n >= 60){
                printf("학점은 %s입니다!\n",GRADES[7]);
            }
​
            else if(n<=59 && n >= 0){
                printf("학점은 %s입니다!\n",GRADES[8]);
            }
​
            //사용자가 점수를 입력함에 따라 GRADES[i]가 출력됨.
​
​
​
            else if(n<-1 || n >100){
                printf("정확한 숫자를 입력해주세요. (0~100)\n");
            }
​
            //사용자가 종료 숫자(-1)을 제외하고 다른 숫자를 입력 시 뜨는 경고 문구
​
​
​
            else if(n<0 && n>-2){
                printf("프로그램을 종료하겠습니다.\n");
                break;
            }
​
            //사용자가 종료 숫자(-1)을 입력씨 뜨는 종료 문구
​
​
        }
    }
    
​
​
​

