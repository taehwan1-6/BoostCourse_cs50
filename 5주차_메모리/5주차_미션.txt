//5주차
//미션 1. 포인터를 이중으로 활용해보자
#include <stdio.h>

int main(void)
{
    int arr[6][5] = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15},
                       {16, 17, 18, 19, 20}, {21, 22, 23, 24, 25}, {26, 27, 28, 29, 30}};

    int row = sizeof(arr) / sizeof(arr[0]);
    int col = sizeof(arr[0]) / sizeof(int);

    for(int i=row-1; i>=0; i--)
    {
        for(int j=0; j<col; j++)
        {
            printf("%d\t", *(*(arr+i)+j));
        }
        printf("\n");
    }
}

===============================================================================================================

//5주차
//미션 2. 메모리와 OverFlow 개념 정리

1) 수업에서 언급되었던 Heap overflow와 stack overflow에 대해서 어떤 경우에 발생이 되는지 서술해주세요.
1. Heap overflow
- 힙 영역에 할당된 버퍼의 크기를 초과하는 데이터를 기록할 때
- 저장된 데이터 및 함수의 주소를 변경함으로써 임의의 코드를 실행할 때

2. Stack overflow
- 스택 영역에 할단된 크기보다 큰 데이터를 넣어서 메모리 주소를 넘치게 쓸 때 발생.

- 프로그램이 실행되면, 실행에 필요한 정보들이 메모리 영역에 올라간다.
프로그램의 명령어가 올라가는 코드 영역
전역 변수와 정적 변수 등이 할당되는 데이터 영역
지역 변수와 매개 변수가 저장되는 스택 영역
필요에 의해 동적으로 메모리를 할당하는 힙 영역

- 특징
Heap의 메모리를 동적으로 할당한다.
Stack은 할당될 메모리의 크기를 컴파일 과정에서 알 수 있지만 Heap은 컴파일 과정에서는 크기를 알 수 없고, 프로그램 실행시 크기가 결정된다.
Stack은 높은 주소에서 낮은 주소로 할당되지만, Heap은 낮은 주소에서 높은 주소로 할당된다.


2) Strcpy와 strncpy의 차이점을 서술해보세요. (어떤 것을 추천하는지와 그 이유에 대해서 서술해주세요.)
strcpy함수 : 문자열 전체를 복사하는 함수.
- strcpy로 복사를 하면 문자열의 끝을 알리는 '\0'까지 복사된다. 따라서 strcpy가 복사라는 개념에 더 맞는 것 같아 추천한다.

strncpy함수 : 문자열을 복사하는데, n만큼만 복사하는 함수.
- 이 함수로 복사했을경우, n의 길이를 주의해야 한다.

3) 메모리 초기화, 복사, 이동, 비교와 같은 함수가 라이브러리에 있습니다. 사용방법을 숙지하고, 간단하게 코드로 구현 후 정상적으로 동작이 되는지 확인해보세요.
1. 메모리 초기화, memset

2. 메모리 복사, memcpy

3. 메모리 이동, memmove

4. 메모리 비교, memcmp













