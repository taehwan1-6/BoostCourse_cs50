//4주차 미션

< 미션1 _ 연성이님 >
#include <stdio.h>
#include <stdlib.h> // qsort()
#include <string.h> // strcmp()
​
​
const int i = 0;
​
int compare(void* first, void* second)
{
	if (*(int*)first > * (int*)second)
		return 1;
	else if (*(int*)first < *(int*)second)
		return -1;
	else
		return 0;
}
​
int main()
{
	int num1 = 0; int num2 = 0;  //변수선언 및 초기화
	char s1[5]; char s2[5];
	int size1 = sizeof(s1) / sizeof(char); int size2 = sizeof(s2) / sizeof(char);
​
​
	printf("input two integers : ");
	scanf("%d, %d", &num1, &num2);
​
	//실수를 문자열로 저장
	sprintf(s1, "%d", num1);
	sprintf(s2, "%d", num2);
​
    //정렬
	qsort(s1, size1, sizeof(char), compare);
	qsort(s2, size2, sizeof(char), compare);
​
	int ret = strcmp(s1, s2); // 문자열 비교
​
	if (ret = 0)
		printf("출력값 : True");
​
​
	else
		printf("출력값 : False");
​
	return 0;


< 미션3 wjstodsss님 >
#include <stdio.h>
​
int Var;
int TIME[101];
int TOTAL;
int bubble(int* x);
​
int main(void){
    printf("\n version1.0");
    printf("\n [안녕하세요. 최단시간에 다리 건너기 \"숏다리\"입니다.]\n");
    printf("\n 프로그램 종료를 원하시면 999를 입력해 주세요\n");
    re:
    printf("\n 구성원 수를 입력하세요(3~100) : ");
    scanf("%d",&Var);
    
    if(Var==999){
    printf("\n 프로그램을 종료합니다.\n");
    return 0;
    }
    else if(Var>101 || Var<=2){//지시문에서 최대 100으로 제한하였고 쌍으로 이동하므로 1과 2일 때는 제외. 
    printf("\n 선생님 3과 100사이의 수를 입력해 주세요 .\n");
    goto re;
    }
    printf("\n 각 구성원들의 다리 이동시간을 입력하세요 \n");
    int i;
    for(i=0;i<Var;i++){//입력한 인수를 받아 int 배열에 저장
        printf("\n %d번 고객님 이동시간 : ",i+1);
        scanf("%d",&TIME[i]);
        }
    *TIME=bubble(TIME);//입력받은 인수를 버블정렬 이용하여 오름차순 정렬
    /*총소요시간 풀이를 크게 세단계로 나누워서 풀이 하였습니다. 예시를 보고 가설을 세웠으며
    이 방법이 최단시간을 항상 이루어낸다는 검증은 되지않았습니다.
    설명 : 4명 각각 1 2 5 10의 이동시간 전등은 필히 한개(갖다줘야함)로 구성된 상황
    1 2
    1
    5 10
    2
    1 2
    가설 : 소요시간이 가장 작은 커플이 최대값과 최대아랫값을 쌍으로 반복하여 차례로 이동하는 것이
    최단시간일 것이다.
    예시에 따라 최소값 1과 그 윗값 2를 쌍으로 하여 최대값 10과 최대아랫값5를 쌍으로 이동시킨뒤 원위치로
    복귀하는 것을 한싸이클로 보고 이후 최대값을 계속 더 해주는 방식.*/
    int MAXSUM;//최대값 누적 변수
    if(Var%2==0){//구성원이 짝수인 경우
        for(i=0,MAXSUM=0;i<Var;i+=2){//쌍으로 이동하므로 최대값의 주소는 2씩 감소 시켜 누적 합산
             MAXSUM+=TIME[Var-i-1];
        }
        TOTAL=(TIME[1]*2+TIME[0])*((Var-2)/2)+MAXSUM;
        //최소값TIME[0]과 최소윗값TIME[1]의 싸이클에 최소쌍을 제외한 나머지 순서쌍의 개수를 곱하고 누적된 최대값합을 더 한다. 
    }
    else{//구성원이 홀수 인 경우
        for(i=0,MAXSUM=0;i<Var;i+=2){
             MAXSUM+=TIME[Var-i-1];
        }
        TOTAL=(TIME[1]*2+TIME[0])*((Var-2)/2)+MAXSUM+TIME[0];
        //짝수인경우에 최소윗값만 추가로 합산한다. 최소값의 경우 최대값합산에 포함되어 있다.
    }
    printf("\n 총 소요시간 : %d \n",TOTAL);
   if(Var>=4){//구성원이 4명이상 부터 싸이클 적용이 가능 하므로 4부터로 제한 
        if(Var%2==0){//구성원이 짝수인 경우
            for(i=2;i<Var;i+=2){
                printf("\n 커플 %d, %d\n",TIME[0],TIME[1]);
                printf("\n 돌싱 %d\n", TIME[0]);
                printf("\n 커플 %d, %d\n", TIME[Var-i],TIME[Var-i+1]);
                printf("\n 돌싱 %d\n", TIME[1]);
            }
            printf("\n 해피엔딩 %d, %d\n",TIME[0],TIME[1]);
        }
        else{//구성원이 짝홀수인 경우
            for(i=3;i<Var;i+=2){
                printf("\n 커플 %d, %d\n",TIME[0],TIME[1]);
                printf("\n 돌싱 %d\n", TIME[0]);
                printf("\n 커플 %d, %d\n", TIME[Var-i+1],TIME[Var-i+2]);
                printf("\n 돌싱 %d\n", TIME[1]);
            }
            printf("\n 바람 %d, %d\n",TIME[0],TIME[2]);//여기서는 TIME[2]와 TIME[1]을 교체해도 무방하다.
            printf("\n 돌싱 %d\n", TIME[0]);
            printf("\n 해피엔딩 %d, %d\n",TIME[0],TIME[1]);
        }
    }
    else if(Var==3){//구성원3은 입력은 가능하지만 싸이클이 나오지 않아서 따로 설정 
        printf("\n 바람 %d, %d\n",TIME[0],TIME[2]);
            printf("\n 돌싱 %d\n", TIME[0]);
            printf("\n 해피엔딩 %d, %d\n",TIME[0],TIME[1]);
    }//사용자정의 함수로 나중에 합칠것은 합쳐보겠습니다.
    return 0;
}
int bubble(int* x){//강사님이 샘플 버블정렬함수, 입력된 요소를 오름차순 정렬함
	int i, j, temp;
    for(i=0;i<Var;i++){
        for(j=0;j<Var-1-i;j++){
            if(x[j]>x[j+1]){
                temp = x[j];
                x[j] = x[j+1];
                x[j+1] = temp;
            }
        }
    }
    return *x;
}


< 미션1_Mary님 >
#include <cs50.h>
#include <stdio.h>

int main(void){
    int number1[5]={3,1,2,1,1};
    int number2[5]={1,1,1,2,3};
    int temp1; 
    int temp2;
    int min1;
    int min2;

    printf("Anagram program. Please enter a 5-digit number.\n");


    for (int i=0; i<4; i++){
      for (int j=i+1; j<5; j++){
         if (number1[j]<number1[i]){
          min1 = j;
          temp1 = number1[i];
          number1[i]=number1[min1];
          number1[min1]= temp1;
    
      }

    }
 }

    for (int i=0; i<4; i++){
        for (int j=i+1; j<5; j++){
         if (number2[j]<number2[i]){
          min1 = j;
          temp1 = number2[i];
          number2[i] = number2[min1];
          number2[min1] = temp1;

            }
        }
    }

    for (int i=0; i<5; i++){
        if (number1[i] != number2[i]){
            printf("False\n");
            return 1;
        }
    }
    printf("True\n");
    return 0;



}

< 미션4 wjstodsss님 >
//미션3부터 느끼는 거지만 이러면 컴퓨터가 문제를 푼게 아니라 사람이 풀어서 t컴퓨터 말로 식을 그냥 표현한 것 아닌가 싶습니다.ㅎㅎ
#include <stdio.h>

int a[201]; //입력된 높이들을 담을 그릇
int b[201]; //낙하거리를 계산한 값을 담을 그릇
int N;//가로길이 변수
int M;//세로길이 변수
int l;//for문에서 활용한 변수
int k=1;//입력된 높이 비교 변수
int sum;//높이가 같거나 큰 경우 누적합산
int bubble(int* x); 
int main(void){
    printf("\n version1.0");
    printf("\n [안녕하세요. 가장 큰 낙하거리 찾기 \"낙하사탕\"입니다.]\n");
    //방의 가로길이와 세로길이 입력
    re:
    printf("\n 방의 가로길이와 세로길이를 공백으로 구분하여 입력해 주세요(2~100) : ");
    scanf("%d %d",&N,&M);
    //방길이 유효성 검사 2<= N,M <=100 오류메시지 출력후 입력으로 회귀
    if(N<1 || N>101 || M<1 || M>101){
    printf("\n 2와 100사이의 정수를 공백으로 구분하여 입력해 주세요 ex) 10 10\n");
    goto re;
    }
    //상자들의 높이 입력(입력한 가로길이의 수만큼 높이를 같거나 다르게하여 입력)
    re1:
    printf("\n 상자들의 높이를 가로길이에 맞춰 공백으로 구분하여 입력해 주세요 : ");
    for(l=0;l<N;l++){//연산에서 무시되기는 하지만 입력길이를 막을 방법을 모르겠습니다. 
	scanf("%d",&a[l]);
    if(a[l]>M){
        printf("\n 상자들의 높이는 방의 세로길이 %d을(를) 초과 할 수 없습니다.\n",M);
        goto re1;
    }
	}
    /*연산의 시작입니다. 먼저 문제를 해석해보면 박스는 지면으로 부터 차곡차곡 쌓여 있고 방은 90도로 1회 회전합니다.
    예시를 통해 설명하면 높이가 7 4 2 0 0 6 0 7 0인 박스 중 90도 회전시 낙하거리가 가장 큰 박스는 방을 사각형의
    x축과 y축으로 볼때 x축      0 1 2 3 4 5 6 7 8이라고 할때 박스 장애물이 없는 경우 좌측 끝 0지점에 있는 박스라고 할 수 있습니다.
    다만 서로 높이가 상이 한 박스탑들이 중간에 있으므로 장애가 되는 박스의 개수 만큼 낙하거리는 감소 될 것입니다.
    장애가 되는 박스는 회전되기전 현재 상태의 우측의 박스들이며 장애 박스와 상관없이 시작점에 따라 최대 낙하거리가 변경되므로 
    전체 방의 가로길이(x축길이) 빼기 자신의 좌표(0~n) 빼기 장애박스의 수(자신의 높이와 같거나 높은 박스탑의 수)
    빼기 1(좌표를0에서시작하였으므로)*/
	for(l=0,sum=0;l<N;l++){//장애가되는 박스의 수를 구하기위한 반복문
		if(a[l]==0||l==N-1){//박스가 0개인 경우와 가로길이 가장 우측에 적재된 경우는 낙하거리가 없거나 0이므로 0으로 설정 
			b[l] = 0;
		}
		else{
			for(k=1;k<N;k++){//자신과 높이가 같거나 높은 박스탑을 찾아 누적 합산
				if(a[l]<=a[l+k]){
					sum++;
				}
			}
			b[l]=N-l-sum-1;//설정된 식으로 낙하거리를 구하여 배열b에 넣음 
			sum=0;//비교할 박스가 바뀌기 직전 마다 장애박스값을 0으로 초기화		
		}
	}
	*b=bubble(b);//버블 내림차순 정렬을 통해 b배열의 첫번째 주소에 가장 큰수를 배치함
	printf("\n 가장 큰 낙하 거리는 \"%d\"입니다.\n\n", b[0]);  //배치한 첫번째수를 출력 = 최대 낙하 거리 
    return 0;
}
int bubble(int* x){//버블정렬을 내림차순으로 하여 최대값을 구하였습니다. 
    int i, j, temp;
    for(i=0;i<N;i++){
        for(j=0;j<N-1-i;j++){
            if(x[j]<x[j+1]){
                temp = x[j];
                x[j] = x[j+1];
                x[j+1] = temp;
            }
        }
    }
    return *x;
} 



